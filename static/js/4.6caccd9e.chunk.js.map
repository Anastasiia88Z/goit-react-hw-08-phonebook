{"version":3,"sources":["redux/contacts/contacts-selectors.js","../node_modules/react-bootstrap/esm/ListGroupItem.js","components/ListContacts/ListContacts.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","views/ContactsView.js"],"names":["getContacts","state","contacts","entities","getFilter","filter","getVisibleContacts","createSelector","normalizeFilter","toLowerCase","contact","name","includes","ListGroupItem","React","ref","bsPrefix","active","disabled","eventKey","className","variant","action","as","props","useBootstrapPrefix","useNavItem","key","makeEventKey","href","navItemProps","meta","handleClick","useEventCallback","event","preventDefault","stopPropagation","onClick","undefined","tabIndex","Component","_jsx","classNames","isActive","displayName","ListContacts","useSelector","dispatch","useDispatch","useEffect","contactsOperation","length","Container","map","id","number","Button","onDeleteContacts","ContactForm","useState","setName","setNumber","handleChange","e","target","value","Form","onSubmit","find","checkName","alert","Group","Label","Row","Col","Control","type","pattern","title","required","onChange","placeholed","Filter","style","display","changeFilter","onBlur","ContactsView","params","fetchContactsAction"],"mappings":"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","file":"static/js/4.6caccd9e.chunk.js","sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.entities;\nexport const getFilter = state => state.contacts.filter;\nexport const getLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizeFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizeFilter),\n    );\n  },\n);\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport { useNavItem } from '@restart/ui/NavItem';\nimport { makeEventKey } from '@restart/ui/SelectableContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ListGroupItem = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  active,\n  disabled,\n  eventKey,\n  className,\n  variant,\n  action,\n  as,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'list-group-item');\n  const [navItemProps, meta] = useNavItem({\n    key: makeEventKey(eventKey, props.href),\n    active,\n    ...props\n  });\n  const handleClick = useEventCallback(event => {\n    if (disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    navItemProps.onClick(event);\n  });\n\n  if (disabled && props.tabIndex === undefined) {\n    props.tabIndex = -1;\n    props['aria-disabled'] = true;\n  } // eslint-disable-next-line no-nested-ternary\n\n\n  const Component = as || (action ? props.href ? 'a' : 'button' : 'div');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    ...navItemProps,\n    onClick: handleClick,\n    className: classNames(className, bsPrefix, meta.isActive && 'active', disabled && 'disabled', variant && `${bsPrefix}-${variant}`, action && `${bsPrefix}-action`)\n  });\n});\nListGroupItem.displayName = 'ListGroupItem';\nexport default ListGroupItem;","import React, { useEffect } from 'react';\nimport * as contactsOperation from '../../redux/contacts/contacts-operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\nimport { Container, Button, ListGroupItem } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\n\nconst ListContacts = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperation.fetchContactsAction());\n  }, [dispatch]);\n\n  const onDeleteContacts = id =>\n    dispatch(contactsOperation.deleteContactsAction(id));\n\n  if (contacts.length === 0) {\n    return <h2 className=\"home-title\">There are no contacts in the list</h2>;\n  } else {\n    return (\n      <Container>\n        <h2>List of contacts</h2>\n        {contacts.map(({ id, name, number }) => (\n          <ListGroupItem key={id}>\n            {name} : {number}\n            <Button onClick={() => onDeleteContacts(id)}>Delete</Button>\n          </ListGroupItem>\n        ))}\n      </Container>\n    );\n  }\n};\nexport default ListContacts;\n\nListContacts.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n  onDeleteContacts: PropTypes.func,\n};\n","import { useState } from 'react';\nimport * as contactsOperation from '../../redux/contacts/contacts-operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Container, Form, Col, Row, Button } from 'react-bootstrap';\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const onSubmit = (name, number) =>\n    dispatch(contactsOperation.addContactsAction({ name, number }));\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    name === 'name' ? setName(value) : setNumber(value);\n  };\n\n  const checkName = name => {\n    return contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (checkName(name)) {\n      alert(`${name} is already in contacts`);\n    } else {\n      onSubmit(name, number);\n      setName('');\n      setNumber('');\n    }\n  };\n\n  return (\n    <Container>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group>\n          <h2>Add new contact</h2>\n          <Form.Label>Name</Form.Label>\n          <Row>\n            <Col>\n              <Form.Control\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                required\n                value={name}\n                onChange={handleChange}\n                placeholed=\"Enter your name\"\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Label>Telephone</Form.Label>\n              <Form.Control\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                required\n                value={number}\n                onChange={handleChange}\n                placeholed=\"Enter your telephone\"\n              />\n            </Col>\n          </Row>\n        </Form.Group>\n        <Row>\n          <Col>\n            <Button type=\"submit\">Add to contact list</Button>\n          </Col>\n        </Row>\n      </Form>\n    </Container>\n  );\n}\n\nexport default ContactForm;\n","import { changeFilter } from '../../redux/contacts/contacts-actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  getFilter,\n  getContacts,\n} from '../../redux/contacts/contacts-selectors';\nimport PropTypes from 'prop-types';\nimport { Form, Container } from 'react-bootstrap';\n\nconst Filter = () => {\n  const contacts = useSelector(getContacts);\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onChangeHandler = event => dispatch(changeFilter(event.target.value));\n  const onBlur = () => dispatch(changeFilter(''));\n\n  if (contacts.length === 0) {\n    return <h2 style={{ display: 'none' }}>Search</h2>;\n  } else {\n    return (\n      <Container>\n        <Form>\n          <Form.Group>\n            <h2>Find contacts by name</h2>\n            <Form.Control\n              type=\"text\"\n              value={value}\n              onChange={onChangeHandler}\n              onBlur={onBlur}\n            />\n          </Form.Group>\n        </Form>\n      </Container>\n    );\n  }\n};\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContactsAction } from '../redux/contacts/contacts-operations';\nimport ListContacts from '../components/ListContacts/ListContacts';\nimport ContactForm from '../components/ContactForm/ContactForm.jsx';\nimport Filter from '../components/Filter/Filter';\n\nexport default function ContactsView(params) {\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(fetchContactsAction()), [dispatch]);\n\n  return (\n    <div>\n      <ContactForm />\n      <Filter />\n      <ListContacts />\n    </div>\n  );\n}\n"],"sourceRoot":""}